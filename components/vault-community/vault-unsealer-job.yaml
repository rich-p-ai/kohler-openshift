---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-unsealer
  namespace: vault-system
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault-unsealer
    spec:
      serviceAccountName: vault
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: vault-unsealer
        image: hashicorp/vault:1.15.2
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        env:
        - name: VAULT_ADDR
          value: "https://vault.vault-system.svc.cluster.local:8200"
        - name: VAULT_SKIP_VERIFY
          value: "true"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Waiting for Vault to be ready..."
          until vault status > /dev/null 2>&1; do
            echo "Vault not ready, waiting..."
            sleep 5
          done
          
          echo "Checking if Vault is initialized..."
          if vault status -format=json | jq -r .initialized | grep -q false; then
            echo "Initializing Vault..."
            vault operator init -key-shares=5 -key-threshold=3 -format=json > /tmp/init-output.json
            
            # Create secrets with unseal keys and root token
            echo "Creating unseal keys secret..."
            UNSEAL_KEY_1=$(jq -r '.unseal_keys_b64[0]' /tmp/init-output.json)
            UNSEAL_KEY_2=$(jq -r '.unseal_keys_b64[1]' /tmp/init-output.json)
            UNSEAL_KEY_3=$(jq -r '.unseal_keys_b64[2]' /tmp/init-output.json)
            ROOT_TOKEN=$(jq -r '.root_token' /tmp/init-output.json)
            
            # These should be stored securely - this is for demo purposes
            kubectl create secret generic vault-unseal-keys \
              --from-literal=unseal-key-1="$UNSEAL_KEY_1" \
              --from-literal=unseal-key-2="$UNSEAL_KEY_2" \
              --from-literal=unseal-key-3="$UNSEAL_KEY_3" \
              --from-literal=root-token="$ROOT_TOKEN" \
              -n vault-system || true
            
            echo "Unsealing Vault..."
            vault operator unseal "$UNSEAL_KEY_1"
            vault operator unseal "$UNSEAL_KEY_2"
            vault operator unseal "$UNSEAL_KEY_3"
            
            echo "Vault initialized and unsealed successfully!"
          else
            echo "Vault is already initialized"
            
            # Try to unseal if sealed
            if vault status -format=json | jq -r .sealed | grep -q true; then
              echo "Vault is sealed, attempting to unseal..."
              if kubectl get secret vault-unseal-keys -n vault-system > /dev/null 2>&1; then
                UNSEAL_KEY_1=$(kubectl get secret vault-unseal-keys -n vault-system -o jsonpath='{.data.unseal-key-1}' | base64 -d)
                UNSEAL_KEY_2=$(kubectl get secret vault-unseal-keys -n vault-system -o jsonpath='{.data.unseal-key-2}' | base64 -d)
                UNSEAL_KEY_3=$(kubectl get secret vault-unseal-keys -n vault-system -o jsonpath='{.data.unseal-key-3}' | base64 -d)
                
                vault operator unseal "$UNSEAL_KEY_1"
                vault operator unseal "$UNSEAL_KEY_2"
                vault operator unseal "$UNSEAL_KEY_3"
                
                echo "Vault unsealed successfully!"
              else
                echo "Unseal keys not found. Manual unsealing required."
                exit 1
              fi
            else
              echo "Vault is already unsealed"
            fi
          fi
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
