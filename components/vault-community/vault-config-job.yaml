---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-config
  namespace: vault-system
  annotations:
    argocd.argoproj.io/sync-wave: "15"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault-config
    spec:
      serviceAccountName: vault
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: vault-config
        image: hashicorp/vault:1.15.2
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        env:
        - name: VAULT_ADDR
          value: "https://vault.vault-system.svc.cluster.local:8200"
        - name: VAULT_SKIP_VERIFY
          value: "true"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Waiting for Vault to be ready and unsealed..."
          until vault status > /dev/null 2>&1; do
            echo "Vault not ready, waiting..."
            sleep 5
          done
          
          # Get root token
          ROOT_TOKEN=$(kubectl get secret vault-unseal-keys -n vault-system -o jsonpath='{.data.root-token}' | base64 -d)
          export VAULT_TOKEN="$ROOT_TOKEN"
          
          echo "Configuring Vault..."
          
          # Enable KV secrets engine if not already enabled
          if ! vault secrets list | grep -q "secret/"; then
            echo "Enabling KV secrets engine..."
            vault secrets enable -path=secret kv-v2
          fi
          
          # Enable Kubernetes auth method if not already enabled
          if ! vault auth list | grep -q "kubernetes/"; then
            echo "Enabling Kubernetes auth method..."
            vault auth enable kubernetes
            
            # Configure Kubernetes auth
            echo "Configuring Kubernetes auth..."
            vault write auth/kubernetes/config \
              token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
              kubernetes_host="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT" \
              kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          fi
          
          # Create policy for external secrets operator
          echo "Creating external-secrets policy..."
          vault policy write external-secrets - <<EOF
          # Allow reading secrets from the kv-v2 secret engine
          path "secret/data/*" {
            capabilities = ["read"]
          }
          
          # Allow listing secrets
          path "secret/metadata/*" {
            capabilities = ["list"]
          }
          EOF
          
          # Create role for external secrets operator
          echo "Creating external-secrets role..."
          vault write auth/kubernetes/role/external-secrets \
            bound_service_account_names=external-secrets \
            bound_service_account_namespaces=external-secrets-system \
            policies=external-secrets \
            ttl=1h
          
          # Create some example secrets
          echo "Creating example secrets..."
          vault kv put secret/database \
            username="admin" \
            password="supersecret"
          
          vault kv put secret/api-keys \
            github-token="ghp_example_token" \
            slack-webhook="https://hooks.slack.com/example"
          
          # Create token for external secrets operator (alternative to K8s auth)
          echo "Creating token for external secrets operator..."
          EXTERNAL_SECRETS_TOKEN=$(vault write -field=token auth/kubernetes/login \
            role=external-secrets \
            jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)")
          
          kubectl create secret generic vault-token \
            --from-literal=token="$EXTERNAL_SECRETS_TOKEN" \
            -n external-secrets-system || \
          kubectl patch secret vault-token \
            --type='merge' \
            -p="{\"data\":{\"token\":\"$(echo -n "$EXTERNAL_SECRETS_TOKEN" | base64)\"}}" \
            -n external-secrets-system
          
          echo "Vault configuration completed successfully!"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
